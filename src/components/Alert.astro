---
interface Props {
  variant?: 'info' | 'success' | 'warning' | 'error';
  title?: string;
  dismissible?: boolean;
  class?: string;
}

const {
  variant = 'info',
  title,
  dismissible = false,
  class: className = '',
} = Astro.props;

const baseStyles = 'rounded-lg p-4';

const variants: Record<NonNullable<Props['variant']>, { bg: string; border: string; icon: string; title: string; text: string }> = {
  info: {
    bg: 'bg-blue-50',
    border: 'border-blue-200',
    icon: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />`,
    title: 'text-blue-800',
    text: 'text-blue-700',
  },
  success: {
    bg: 'bg-green-50',
    border: 'border-green-200',
    icon: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />`,
    title: 'text-green-800',
    text: 'text-green-700',
  },
  warning: {
    bg: 'bg-yellow-50',
    border: 'border-yellow-200',
    icon: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />`,
    title: 'text-yellow-800',
    text: 'text-yellow-700',
  },
  error: {
    bg: 'bg-red-50',
    border: 'border-red-200',
    icon: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />`,
    title: 'text-red-800',
    text: 'text-red-700',
  },
};

const variantStyles = variants[variant];

const classes = [
  baseStyles,
  variantStyles.bg,
  'border',
  variantStyles.border,
  className,
].filter(Boolean).join(' ');
---

<div class={classes} role="alert">
  <div class="flex">
    <div class="flex-shrink-0">
      <svg class={`h-5 w-5 ${variantStyles.text}`} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true" set:html={variantStyles.icon} />
    </div>
    <div class="ml-3">
      {title && (
        <h3 class={`text-sm font-medium ${variantStyles.title}`}>
          {title}
        </h3>
      )}
      <div class={`text-sm ${title ? 'mt-2' : ''} ${variantStyles.text}`}>
        <slot />
      </div>
    </div>
    {dismissible && (
      <div class="ml-auto pl-3">
        <div class="-mx-1.5 -my-1.5">
          <button
            type="button"
            class={`inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2 ${variantStyles.bg} ${variantStyles.text} hover:bg-opacity-75 focus:ring-offset-${variant}-50 focus:ring-${variant}-600`}
          >
            <span class="sr-only">St√§ng</span>
            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
    )}
  </div>
</div>

<script>
  // Handle alert dismissal
  document.querySelectorAll('[role="alert"] button').forEach(button => {
    button.addEventListener('click', () => {
      const alert = button.closest('[role="alert"]');
      alert?.remove();
    });
  });
</script> 